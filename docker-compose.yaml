# docker compose up -d redis mongodb postgres rabbitmq elasticsearch kibana
# curl -s -X POST -u elastics:admin1234 -H "Content-Type: application/json" http://localhost:9200/_security/user/kibana_system/_password -d "{\"password\": \"\kibana\"}"
# bin/elasticsearch-service-tokens create elastic/kibana jobber-kibana - AAEAAWVsYXN0aWMva2liYW5hL2pvYmJlci1raWJhbmE6eTJfaWw5bmhURkc2QTdDUy1ncVFBZw
version: '3.9'
services:
  redis:
    container_name: redis_container
    image: redis:alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --loglevel warning
    volumes:
      - ./docker-volumes/cache:/data
  mongodb:
    container_name: mongodb_container
    image: mongo:latest
    restart: always
    ports:
      - 27017:27017
    volumes:
      - ./docker-volumes/data:/data/db
  mysql:
    container_name: mysql_container
    image: mysql:9.3.0
    # command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      - MYSQL_USER=jobber
      - MYSQL_DATABASE=jobber_auth
      - MYSQL_ROOT_PASSWORD=jobber
      - MYSQL_PASSWORD=jobber
    ports:
      - '3307:3306'
    volumes:
      - './docker-volumes/mysql:/var/lib/mysql'
  postgres:
    container_name: postgres_container
    image: postgres
    restart: always
    environment:
      - POSTGRES_USER=jobber
      - POSTGRES_DB=jobber_reviews
      - POSTGRES_PASSWORD=jobber
    ports:
      - '5432:5432'
    volumes:
      - './docker-volumes/postgres:/var/lib/postgresql'  
  rabbitmq:
    container_name: rabbitmq_container
    image: rabbitmq:3.13-rc-management-alpine
    restart: always
    ports:
      - '5672:5672'
      - '15672:15672'
  elasticsearch:
    container_name: elasticsearch_container
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    restart: always
    environment:
      ES_JAVA_OPTS: -Xmx1g -Xms1g
      bootstrap.memory_lock: "true"
      discovery.type: single-node
      network.host: 0.0.0.0
      transport.host: 127.0.0.1
      http.host: 0.0.0.0
      xpack.security.enabled: "true"
      xpack.security.authc.api_key.enabled: "true"
      xpack.monitoring.collection.enabled: "true"
      xpack.security.enrollment.enabled: "true"
      xpack.security.authc.token.enabled: "true"
      ELASTIC_PASSWORD: admin1234
    ports:
      - 9200:9200
      - 9300:9300
    volumes:
      - ./docker-volumes/elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - elastic
  kibana:
    container_name: kibana_container
    image: docker.elastic.co/kibana/kibana:8.12.2
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=["http://elasticsearch_container:9200"]
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=kibana
      - ELASTICSEARCH_SERVICEACCOUNT_TOKEN=AAEAAWVsYXN0aWMva2liYW5hL2pvYmJlci1raWJhbmE6aGpmUFdpeEhRRHVCcENTSnd1WFNDQQ
      - XPACK_FLEET_AGENTS_ELASTICSEARCH_HOSTS=["http://elasticsearch_container:9200"]
    ports:
      - 5601:5601
    networks:
      - elastic
    volumes:
      - ./kibana.yml/:/usr/share/kibana/config/kibana.yml:ro
    depends_on:
      - elasticsearch
  notifications:
    container_name: notification_container
    build:
      context: 2-notification-service
      dockerfile: Dockerfile.dev
    restart: always
    ports: 
    - 5001:4001
    env_file: 2-notification-service/.env
    environment:
      - ENABLE_APM=0
      - NODE_ENV=development
      - CLIENT_URL=http://localhost:3000
      - RABBITMQ_ENDPOINT=amqp://guest:guest@rabbitmq_container:5672
      - SENDER_EMAIL=lilian.schulist22@ethereal.email
      - SENDER_EMAIL_PASSWORD=2bhWey6kdcPv4TxaYk
      - ELASTIC_SEARCH_URL=http://elasticsearch_container:9200
      - ELASTIC_AMP_SERVER_URL=http://localhost:8200
      - ELASTIC_AMP_SECRET_TOKEN=
    depends_on:
      - elasticsearch


networks:
  elastic:
    name: elastic

  
